#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// ============================
// Estrutura do Componente
// ============================
typedef struct {
    char nome[30];
    char tipo[20];
    int prioridade;
} Componente;

// ============================
// Função para exibir componentes
// ============================
void mostrarComponentes(Componente comp[], int qtd) {
    printf("\n--- Componentes ---\n");
    printf("%-20s %-15s %-10s\n", "Nome", "Tipo", "Prioridade");
    for (int i = 0; i < qtd; i++) {
        printf("%-20s %-15s %-10d\n", comp[i].nome, comp[i].tipo, comp[i].prioridade);
    }
}

// ============================
// Bubble Sort por nome
// ============================
int bubbleSortNome(Componente comp[], int qtd) {
    int comparacoes = 0;
    for (int i = 0; i < qtd - 1; i++) {
        for (int j = 0; j < qtd - i - 1; j++) {
            comparacoes++;
            if (strcmp(comp[j].nome, comp[j+1].nome) > 0) {
                Componente temp = comp[j];
                comp[j] = comp[j+1];
                comp[j+1] = temp;
            }
        }
    }
    return comparacoes;
}

// ============================
// Insertion Sort por tipo
// ============================
int insertionSortTipo(Componente comp[], int qtd) {
    int comparacoes = 0;
    for (int i = 1; i < qtd; i++) {
        Componente chave = comp[i];
        int j = i - 1;
        while (j >= 0) {
            comparacoes++;
            if (strcmp(comp[j].tipo, chave.tipo) > 0) {
                comp[j + 1] = comp[j];
                j--;
            } else {
                break;
            }
        }
        comp[j + 1] = chave;
    }
    return comparacoes;
}

// ============================
// Selection Sort por prioridade
// ============================
int selectionSortPrioridade(Componente comp[], int qtd) {
    int comparacoes = 0;
    for (int i = 0; i < qtd - 1; i++) {
        int min = i;
        for (int j = i + 1; j < qtd; j++) {
            comparacoes++;
            if (comp[j].prioridade < comp[min].prioridade) {
                min = j;
            }
        }
        if (min != i) {
            Componente temp = comp[i];
            comp[i] = comp[min];
            comp[min] = temp;
        }
    }
    return comparacoes;
}

// ============================
// Busca binária por nome
// ============================
int buscaBinariaPorNome(Componente comp[], int qtd, char chave[], int *comparacoes) {
    int inicio = 0, fim = qtd - 1;
    *comparacoes = 0;
    while (inicio <= fim) {
        int meio = (inicio + fim) / 2;
        (*comparacoes)++;
        int cmp = strcmp(comp[meio].nome, chave);
        if (cmp == 0) {
            return meio;
        } else if (cmp < 0) {
            inicio = meio + 1;
        } else {
            fim = meio - 1;
        }
    }
    return -1;
}

// ============================
// Função principal
// ============================
int main() {
    Componente componentes[20];
    int qtd = 0;
    int opcao;
    
    printf("=== Cadastro de Componentes da Torre de Fuga ===\n");
    printf("Quantos componentes deseja cadastrar (max 20)? ");
    scanf("%d", &qtd);
    getchar(); // Limpar buffer

    if (qtd > 20) qtd = 20;

    // Entrada de dados
    for (int i = 0; i < qtd; i++) {
        printf("\nComponente %d:\n", i+1);
        printf("Nome: ");
        fgets(componentes[i].nome, sizeof(componentes[i].nome), stdin);
        componentes[i].nome[strcspn(componentes[i].nome, "\n")] = '\0';

        printf("Tipo: ");
        fgets(componentes[i].tipo, sizeof(componentes[i].tipo), stdin);
        componentes[i].tipo[strcspn(componentes[i].tipo, "\n")] = '\0';

        printf("Prioridade (1-10): ");
        scanf("%d", &componentes[i].prioridade);
        getchar();
    }

    // Menu de ordenação
    do {
        printf("\n--- Menu de Estrategia ---\n");
        printf("1. Ordenar por Nome (Bubble Sort)\n");
        printf("2. Ordenar por Tipo (Insertion Sort)\n");
        printf("3. Ordenar por Prioridade (Selection Sort)\n");
        printf("4. Buscar componente-chave (busca binaria por nome)\n");
        printf("0. Sair\n");
        printf("Escolha: ");
        scanf("%d", &opcao);
        getchar();

        clock_t inicio, fim;
        int comparacoes, pos;
        char chave[30];

        switch(opcao) {
            case 1:
                inicio = clock();
                comparacoes = bubbleSortNome(componentes, qtd);
                fim = clock();
                mostrarComponentes(componentes, qtd);
                printf("\nBubble Sort por nome: %d comparacoes | Tempo: %.6f segundos\n", comparacoes, (double)(fim - inicio)/CLOCKS_PER_SEC);
                break;
            case 2:
                inicio = clock();
                comparacoes = insertionSortTipo(componentes, qtd);
                fim = clock();
                mostrarComponentes(componentes, qtd);
                printf("\nInsertion Sort por tipo: %d comparacoes | Tempo: %.6f segundos\n", comparacoes, (double)(fim - inicio)/CLOCKS_PER_SEC);
                break;
            case 3:
                inicio = clock();
                comparacoes = selectionSortPrioridade(componentes, qtd);
                fim = clock();
                mostrarComponentes(componentes, qtd);
                printf("\nSelection Sort por prioridade: %d comparacoes | Tempo: %.6f segundos\n", comparacoes, (double)(fim - inicio)/CLOCKS_PER_SEC);
                break;
            case 4:
                printf("\nInforme o nome do componente-chave: ");
                fgets(chave, sizeof(chave), stdin);
                chave[strcspn(chave, "\n")] = '\0';
                pos = buscaBinariaPorNome(componentes, qtd, chave, &comparacoes);
                if (pos != -1) {
                    printf("\nComponente-chave encontrado: %s | %s | %d\n", componentes[pos].nome, componentes[pos].tipo, componentes[pos].prioridade);
                } else {
                    printf("\nComponente-chave nao encontrado.\n");
                }
                printf("Comparacoes na busca binaria: %d\n", comparacoes);
                break;
            case 0:
                printf("Encerrando sistema...\n");
                break;
            default:
                printf("Opcao invalida.\n");
        }

    } while(opcao != 0);

    return 0;
}
